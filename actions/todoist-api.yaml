openapi: 3.1.0
info:
  title: Todoist API
  version: 1.0.0
  license:
    name: MIT
paths:
  /projects:
    get:
      operationId: getAllProjects
      summary: Get all projects
      tags:
        - projects
      responses:
        '200':
          description: An array of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks:
    get:
      operationId: getActiveTasks
      summary: Get active tasks
      tags:
        - tasks
      parameters:
        - name: projectId
          in: query
          description: The id of the project to retrieve tasks for
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: An array of active tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createTask
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{id}:
    post:
      operationId: updateTask
      summary: Update a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the task to update
          schema:
            type: integer
      requestBody:
        required: true
        description: Task to update
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: The content of the task
                due_string:
                  type: string
                  description: The due date of the task, in human-readable format
                due_lang:
                  type: string
                  description: Language code for the due_string
                priority:
                  type: integer
                  description: The priority of the task (1-4)
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: deleteTask
      summary: Delete a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the task to delete
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{task_id}/close:
    post:
      operationId: closeTask
      summary: Close a task
      tags:
        - tasks
      parameters:
        - name: task_id
          in: path
          required: true
          description: The ID of the task to close
          schema:
            type: string
      responses:
        '204':
          description: Task closed successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /comments:
    get:
      operationId: getComments
      summary: Get comments for a task or project
      tags:
        - comments
      parameters:
        - name: task_id
          in: query
          description: ID of the task to fetch comments for
          required: false
          schema:
            type: string
        - name: project_id
          in: query
          description: ID of the project to fetch comments for
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createComment
      summary: Create a comment on a task or project
      tags:
        - comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                task_id:
                  type: string
                project_id:
                  type: string
                content:
                  type: string
                  description: The comment content
      responses:
        '200':
          description: Comment successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/completed/by_completion_date:
    get:
      operationId: getCompletedTasksByDueDate
      summary: Get completed tasks by due date
      tags:
        - tasks
      parameters:
        - name: since
          in: query
          description: ISO 8601 date string to filter from
          required: true
          schema:
            type: string
            format: date-time
        - name: until
          in: query
          description: ISO 8601 date string to filter to
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: An array of completed tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Task:
      type: object
      required:
        - content
      properties:
        id:
          type: string
          description: Task ID.
        project_id:
          type: string
          description: Task's project ID (read-only).
        section_id:
          type: string
          description: ID of section task belongs to.
        content:
          type: string
          description: Task content.
        description:
          type: string
          description: Description of the task.
        is_completed:
          type: boolean
        labels:
          type: array
          items:
            type: string
        parent_id:
          type: string
        order:
          type: integer
        priority:
          type: integer
        due:
          type: object
        url:
          type: string
        comment_count:
          type: integer
        created_at:
          type: string
        creator_id:
          type: string
        assignee_id:
          type: string
        assigner_id:
          type: string
        duration:
          type: object
    Comment:
      type: object
      required:
        - content
      properties:
        id:
          type: string
          description: unique ID for comment
        posted_uid:
          type: string
          description: posted unique comment ID  
        content:
          type: string
          description: actual content in comment 
        file_attachment:
          type: object
          description: file attachment  
        uids_to_notify:
          type: array
          description: array of strings for users to notify about comment
          items: 
            type: string
        is_deleted:
          type: boolean
          description: flag for if comment has been deleted 
        posted_at:
          type: string
          description: date when comment was posted  
        reactions:
          type: object
          description: object with reactions to comment  
    Due:
      type: object
      required:
        - date
        - is_recurring
      properties:
        date:
          type: string
        is_recurring:
          type: boolean
        datetime:
          type: string
        timezone:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Project:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    Projects:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
servers:
  - url: https://api.todoist.com/rest/v2